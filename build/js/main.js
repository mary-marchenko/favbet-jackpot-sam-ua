"use strict";
"use strict";

document.addEventListener('DOMContentLoaded', function () {
  var currentIndex = 1;
  var startX = 0;
  var isDragging = false;
  var slider = document.querySelector('.prize__slider');
  var items = document.querySelectorAll('.prize__item');
  var totalItems = items.length;
  function updateSlider() {
    items.forEach(function (item, index) {
      var distance = index - currentIndex;
      var newPosition = distance * 33.33;
      if (distance > totalItems / 2) {
        newPosition -= totalItems * 33.33;
      } else if (distance < -totalItems / 2) {
        newPosition += totalItems * 33.33;
      }
      var scale = index === currentIndex ? 1 : 0.8;
      item.style.transform = "translateX(".concat(newPosition, "%) scale(").concat(scale, ")");
      item.style.zIndex = index === currentIndex ? 2 : 1;
      var isVisible = Math.abs(distance) <= 1 || index === 0 && currentIndex === totalItems - 1 || index === totalItems - 1 && currentIndex === 0;
      item.classList.toggle('hidden', !isVisible);
      item.classList.toggle('active', index === currentIndex);
      item.classList.remove('left-slide', 'right-slide');
      if (distance === 1 || currentIndex === totalItems - 1 && index === 0) {
        item.classList.add('right-slide');
      } else if (distance === -1 || currentIndex === 0 && index === totalItems - 1) {
        item.classList.add('left-slide');
      }
    });
  }
  function moveSlider(offset) {
    currentIndex = (currentIndex + offset + totalItems) % totalItems;
    updateSlider();
  }
  function handleStart(event) {
    isDragging = true;
    startX = event.clientX || event.touches[0].clientX;
  }
  function handleMove(event) {
    if (!isDragging) return;
    var currentX = event.clientX || event.touches[0].clientX;
    var diffX = currentX - startX;
    if (Math.abs(diffX) > 50) {
      moveSlider(diffX > 0 ? -1 : 1);
      isDragging = false;
    }
  }
  function handleEnd() {
    isDragging = false;
  }
  var buttonsLeft = document.querySelectorAll('.button-slider-left');
  var buttonsRight = document.querySelectorAll('.button-slider-right');
  buttonsLeft.forEach(function (btn) {
    btn.addEventListener('click', function () {
      moveSlider(-1);
    });
  });
  buttonsRight.forEach(function (btn) {
    btn.addEventListener('click', function () {
      moveSlider(1);
    });
  });
  slider.addEventListener('mousedown', handleStart);
  slider.addEventListener('touchstart', handleStart);
  document.addEventListener('mousemove', handleMove);
  document.addEventListener('touchmove', handleMove);
  document.addEventListener('mouseup', handleEnd);
  document.addEventListener('touchend', handleEnd);
  updateSlider();
});

/********************************ANIMATION******************************/

var animItems = document.querySelectorAll('._anim-items');
if (animItems.length > 0) {
  var animOnScroll = function animOnScroll(params) {
    for (var index = 0; index < animItems.length; index++) {
      var animItem = animItems[index];
      var animItemHight = animItem.offsetHeight;
      var animItemOffSet = offset(animItem).top;
      var animStart = 4;
      var animItemPoint = window.innerHeight - animItemHight / animStart;
      if (animItemHight > window.innerHeight) {
        animItemPoint = window.innerHeight - window.innerHeight / animStart;
      }
      if (pageYOffset > animItemOffSet - animItemPoint && pageYOffset < animItemOffSet + animItemHight) {
        animItem.classList.add('_view');
      } else {
        if (!animItem.classList.contains('_anim-no-hide')) {
          animItem.classList.remove('_view');
        }
      }
    }
    function offset(el) {
      var rect = el.getBoundingClientRect(),
        scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
        scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      return {
        top: rect.top + scrollTop,
        left: rect.left + scrollLeft
      };
    }
  };
  window.addEventListener('scroll', animOnScroll);
  setTimeout(function () {
    animOnScroll();
  }, 300);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
