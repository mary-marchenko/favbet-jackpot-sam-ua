"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
(function () {
  var apiURL = 'https://fav-prom.com/api_translates';
  var ukLeng = document.querySelector('#ukLeng'),
    enLeng = document.querySelector('#enLeng');
  var locale = 'en';
  if (ukLeng) locale = 'uk';
  if (enLeng) locale = 'en';
  var i18nData = {};
  function loadTranslations() {
    return fetch("".concat(apiURL, "/translates/").concat(locale)).then(function (res) {
      return res.json();
    }).then(function (json) {
      i18nData = json;
      translate();
      var mutationObserver = new MutationObserver(function (mutations) {
        translate();
      });
      mutationObserver.observe(document.getElementById('jackpot'), {
        childList: true,
        subtree: true
      });
    });
  }
  function translate() {
    var elems = document.querySelectorAll('[data-translate]');
    if (elems && elems.length) {
      elems.forEach(function (elem) {
        var key = elem.getAttribute('data-translate');
        elem.innerHTML = translateKey(key);
        elem.removeAttribute('data-translate');
      });
    }
    refreshLocalizedClass();
  }
  function translateKey(key) {
    if (!key) {
      return;
    }
    return i18nData[key] || '*----NEED TO BE TRANSLATED----*   key:  ' + key;
  }
  function refreshLocalizedClass(element, baseCssClass) {
    if (!element) {
      return;
    }
    for (var _i = 0, _arr = ['uk', 'en']; _i < _arr.length; _i++) {
      var lang = _arr[_i];
      element.classList.remove(baseCssClass + lang);
    }
    element.classList.add(baseCssClass + locale);
  }
  var request = function request(link, extraOptions) {
    return fetch(apiURL + link, _objectSpread({
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }, extraOptions || {})).then(function (res) {
      return res.json();
    });
  };
  var InitPage = function InitPage() {
    translate();
  };
  function init() {
    if (window.store) {
      InitPage();
    } else {
      InitPage();
      var c = 0;
      var i = setInterval(function () {
        if (c < 50) {
          if (!!window.g_user_id) {
            InitPage();
            clearInterval(i);
          }
        } else {
          clearInterval(i);
        }
      }, 200);
    }
  }
  loadTranslations().then(init);
  var mainPage = document.querySelector('.fav__page');
  setTimeout(function () {
    return mainPage.classList.add('overflow');
  }, 1000);

  // Websockets
  var wsURL = 'wss://www.favbet.ua/socket';
  var socket = new WebSocket(wsURL);
  var extractJackpotAmounts = function extractJackpotAmounts(data) {
    var defaultCategories = {
      major: 0,
      minor: 0,
      mini: 0,
      mega: 0
    };
    var jackpots = data.data;
    return Object.keys(defaultCategories).reduce(function (amounts, jackpotType) {
      amounts[jackpotType] = jackpots[jackpotType] ? jackpots[jackpotType].amount : 0;
      return amounts;
    }, {});
  };
  var updatePrizeElements = function updatePrizeElements(jackpotAmounts) {
    for (var _i2 = 0, _Object$entries = Object.entries(jackpotAmounts); _i2 < _Object$entries.length; _i2++) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
        category = _Object$entries$_i[0],
        amount = _Object$entries$_i[1];
      var element = document.querySelector(".prize-".concat(category));
      if (element) {
        element.textContent = "".concat(amount.toFixed(2), "\u20B4");
      }
    }
  };
  socket.onmessage = function (event) {
    try {
      var message = JSON.parse(event.data);
      if (message.event === 'jackpots_update') {
        var jackpotAmounts = extractJackpotAmounts(message);
        updatePrizeElements(jackpotAmounts);
      }
    } catch (error) {
      console.error('Error parsing message:', error);
    }
  };
  socket.onerror = function (error) {
    console.error('WebSocket Error:', error);
  };
  var sendPing = function sendPing() {
    if (socket.readyState === WebSocket.OPEN) {
      socket.send(JSON.stringify({
        cmd: "ping",
        cid: "ping"
      }));
      console.log('Ping message sent');
    }
  };
  socket.onopen = function () {
    console.log('WebSocket connection established');
    var cid = crypto.randomUUID();
    socket.send(JSON.stringify({
      cmd: "subscribe_jackpot_updates",
      cid: cid
    }));
    setInterval(sendPing, 50000);
  };
  socket.onclose = function () {
    console.log('WebSocket connection closed');
  };
})();
"use strict";

(function () {
  var currentIndex = 1;
  var startX = 0;
  var isDragging = false;
  var slider = document.querySelector('.prize__slider');
  var items = document.querySelectorAll('.prize__item');
  var totalItems = items.length;
  function updateSlider() {
    items.forEach(function (item, index) {
      var distance = index - currentIndex;
      var newPosition = distance * 33.33;
      if (distance > totalItems / 2) {
        newPosition -= totalItems * 33.33;
      } else if (distance < -totalItems / 2) {
        newPosition += totalItems * 33.33;
      }
      var scale = index === currentIndex ? 1 : 0.8;
      item.style.transform = "translateX(".concat(newPosition, "%) scale(").concat(scale, ")");
      item.style.zIndex = index === currentIndex ? 2 : 1;
      var isVisible = Math.abs(distance) <= 1 || index === 0 && currentIndex === totalItems - 1 || index === totalItems - 1 && currentIndex === 0;
      item.classList.toggle('hidden', !isVisible);
      item.classList.toggle('active', index === currentIndex);
      item.classList.remove('left-slide', 'right-slide');
      if (distance === 1 || currentIndex === totalItems - 1 && index === 0) {
        item.classList.add('right-slide');
      } else if (distance === -1 || currentIndex === 0 && index === totalItems - 1) {
        item.classList.add('left-slide');
      }
    });
  }
  function moveSlider(offset) {
    currentIndex = (currentIndex + offset + totalItems) % totalItems;
    updateSlider();
  }
  function handleStart(event) {
    isDragging = true;
    startX = event.clientX || event.touches[0].clientX;
  }
  function handleMove(event) {
    if (!isDragging) return;
    var currentX = event.clientX || event.touches[0].clientX;
    var diffX = currentX - startX;
    if (Math.abs(diffX) > 50) {
      moveSlider(diffX > 0 ? -1 : 1);
      isDragging = false;
    }
  }
  function handleEnd() {
    isDragging = false;
  }
  var buttonsLeft = document.querySelectorAll('.button-slider-left');
  var buttonsRight = document.querySelectorAll('.button-slider-right');
  buttonsLeft.forEach(function (btn) {
    btn.addEventListener('click', function () {
      moveSlider(-1);
    });
  });
  buttonsRight.forEach(function (btn) {
    btn.addEventListener('click', function () {
      moveSlider(1);
    });
  });
  slider.addEventListener('mousedown', handleStart);
  slider.addEventListener('touchstart', handleStart);
  document.addEventListener('mousemove', handleMove);
  document.addEventListener('touchmove', handleMove);
  document.addEventListener('mouseup', handleEnd);
  document.addEventListener('touchend', handleEnd);
  updateSlider();

  /********************************ANIMATION******************************/

  var animItems = document.querySelectorAll('._anim-items');
  if (animItems.length > 0) {
    var animOnScroll = function animOnScroll(params) {
      for (var index = 0; index < animItems.length; index++) {
        var animItem = animItems[index];
        var animItemHight = animItem.offsetHeight;
        var animItemOffSet = offset(animItem).top;
        var animStart = 4;
        var animItemPoint = window.innerHeight - animItemHight / animStart;
        if (animItemHight > window.innerHeight) {
          animItemPoint = window.innerHeight - window.innerHeight / animStart;
        }
        if (pageYOffset > animItemOffSet - animItemPoint && pageYOffset < animItemOffSet + animItemHight) {
          animItem.classList.add('_view');
        } else {
          if (!animItem.classList.contains('_anim-no-hide')) {
            animItem.classList.remove('_view');
          }
        }
      }
      function offset(el) {
        var rect = el.getBoundingClientRect(),
          scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,
          scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        return {
          top: rect.top + scrollTop,
          left: rect.left + scrollLeft
        };
      }
    };
    window.addEventListener('scroll', animOnScroll);
    setTimeout(function () {
      animOnScroll();
    }, 300);
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJzZWNvbmQuanMiXSwibmFtZXMiOlsiYXBpVVJMIiwidWtMZW5nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZW5MZW5nIiwibG9jYWxlIiwiaTE4bkRhdGEiLCJsb2FkVHJhbnNsYXRpb25zIiwiZmV0Y2giLCJjb25jYXQiLCJ0aGVuIiwicmVzIiwianNvbiIsInRyYW5zbGF0ZSIsIm11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zIiwib2JzZXJ2ZSIsImdldEVsZW1lbnRCeUlkIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImVsZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImZvckVhY2giLCJlbGVtIiwia2V5IiwiZ2V0QXR0cmlidXRlIiwiaW5uZXJIVE1MIiwidHJhbnNsYXRlS2V5IiwicmVtb3ZlQXR0cmlidXRlIiwicmVmcmVzaExvY2FsaXplZENsYXNzIiwiZWxlbWVudCIsImJhc2VDc3NDbGFzcyIsIl9pIiwiX2FyciIsImxhbmciLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJyZXF1ZXN0IiwibGluayIsImV4dHJhT3B0aW9ucyIsIl9vYmplY3RTcHJlYWQiLCJoZWFkZXJzIiwiSW5pdFBhZ2UiLCJpbml0Iiwid2luZG93Iiwic3RvcmUiLCJjIiwiaSIsInNldEludGVydmFsIiwiZ191c2VyX2lkIiwiY2xlYXJJbnRlcnZhbCIsIm1haW5QYWdlIiwic2V0VGltZW91dCIsIndzVVJMIiwic29ja2V0IiwiV2ViU29ja2V0IiwiZXh0cmFjdEphY2twb3RBbW91bnRzIiwiZGF0YSIsImRlZmF1bHRDYXRlZ29yaWVzIiwibWFqb3IiLCJtaW5vciIsIm1pbmkiLCJtZWdhIiwiamFja3BvdHMiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwiYW1vdW50cyIsImphY2twb3RUeXBlIiwiYW1vdW50IiwidXBkYXRlUHJpemVFbGVtZW50cyIsImphY2twb3RBbW91bnRzIiwiX2kyIiwiX09iamVjdCRlbnRyaWVzIiwiZW50cmllcyIsIl9PYmplY3QkZW50cmllcyRfaSIsIl9zbGljZWRUb0FycmF5IiwiY2F0ZWdvcnkiLCJ0ZXh0Q29udGVudCIsInRvRml4ZWQiLCJvbm1lc3NhZ2UiLCJldmVudCIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJlcnJvciIsImNvbnNvbGUiLCJvbmVycm9yIiwic2VuZFBpbmciLCJyZWFkeVN0YXRlIiwiT1BFTiIsInNlbmQiLCJzdHJpbmdpZnkiLCJjbWQiLCJjaWQiLCJsb2ciLCJvbm9wZW4iLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwib25jbG9zZSIsImN1cnJlbnRJbmRleCIsInN0YXJ0WCIsImlzRHJhZ2dpbmciLCJzbGlkZXIiLCJpdGVtcyIsInRvdGFsSXRlbXMiLCJ1cGRhdGVTbGlkZXIiLCJpdGVtIiwiaW5kZXgiLCJkaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwic2NhbGUiLCJzdHlsZSIsInRyYW5zZm9ybSIsInpJbmRleCIsImlzVmlzaWJsZSIsIk1hdGgiLCJhYnMiLCJ0b2dnbGUiLCJtb3ZlU2xpZGVyIiwib2Zmc2V0IiwiaGFuZGxlU3RhcnQiLCJjbGllbnRYIiwidG91Y2hlcyIsImhhbmRsZU1vdmUiLCJjdXJyZW50WCIsImRpZmZYIiwiaGFuZGxlRW5kIiwiYnV0dG9uc0xlZnQiLCJidXR0b25zUmlnaHQiLCJidG4iLCJhZGRFdmVudExpc3RlbmVyIiwiYW5pbUl0ZW1zIiwiYW5pbU9uU2Nyb2xsIiwicGFyYW1zIiwiYW5pbUl0ZW0iLCJhbmltSXRlbUhpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwiYW5pbUl0ZW1PZmZTZXQiLCJ0b3AiLCJhbmltU3RhcnQiLCJhbmltSXRlbVBvaW50IiwiaW5uZXJIZWlnaHQiLCJwYWdlWU9mZnNldCIsImNvbnRhaW5zIiwiZWwiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG9wIiwibGVmdCJd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Q2JpRixZQUFZLENBQUMsQ0FBQztJQUNsQixDQUFDLEVBQUUsR0FBRyxDQUFDO0VBRVg7QUFFQSxDQUFDLEVBQUUsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBhcGlVUkwgPSAnaHR0cHM6Ly9mYXYtcHJvbS5jb20vYXBpX3RyYW5zbGF0ZXMnO1xuXG4gICAgY29uc3QgdWtMZW5nID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VrTGVuZycpLFxuICAgICAgICBlbkxlbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZW5MZW5nJyk7XG5cbiAgICBsZXQgbG9jYWxlID0gJ2VuJztcblxuICAgIGlmICh1a0xlbmcpIGxvY2FsZSA9ICd1ayc7XG4gICAgaWYgKGVuTGVuZykgbG9jYWxlID0gJ2VuJztcblxuICAgIGxldCBpMThuRGF0YSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gbG9hZFRyYW5zbGF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGAke2FwaVVSTH0vdHJhbnNsYXRlcy8ke2xvY2FsZX1gKS50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oanNvbiA9PiB7XG4gICAgICAgICAgICAgICAgaTE4bkRhdGEgPSBqc29uO1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnamFja3BvdCcpLCB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKCkge1xuICAgICAgICBjb25zdCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRyYW5zbGF0ZV0nKVxuICAgICAgICBpZiAoZWxlbXMgJiYgZWxlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBlbGVtcy5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGVsZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXRyYW5zbGF0ZScpO1xuICAgICAgICAgICAgICAgIGVsZW0uaW5uZXJIVE1MID0gdHJhbnNsYXRlS2V5KGtleSk7XG4gICAgICAgICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtdHJhbnNsYXRlJyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJlZnJlc2hMb2NhbGl6ZWRDbGFzcygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZUtleShrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaTE4bkRhdGFba2V5XSB8fCAnKi0tLS1ORUVEIFRPIEJFIFRSQU5TTEFURUQtLS0tKiAgIGtleTogICcgKyBrZXk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVmcmVzaExvY2FsaXplZENsYXNzKGVsZW1lbnQsIGJhc2VDc3NDbGFzcykge1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGxhbmcgb2YgWyd1aycsICdlbiddKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoYmFzZUNzc0NsYXNzICsgbGFuZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGJhc2VDc3NDbGFzcyArIGxvY2FsZSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVxdWVzdCA9IGZ1bmN0aW9uIChsaW5rLCBleHRyYU9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoKGFwaVVSTCArIGxpbmssIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi4oZXh0cmFPcHRpb25zIHx8IHt9KVxuICAgICAgICB9KS50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgIH1cblxuXG4gICAgY29uc3QgSW5pdFBhZ2UgPSAoKSA9PiB7XG4gICAgICAgIHRyYW5zbGF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGlmICh3aW5kb3cuc3RvcmUpIHtcbiAgICAgICAgICAgIEluaXRQYWdlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBJbml0UGFnZSgpO1xuICAgICAgICAgICAgbGV0IGMgPSAwO1xuICAgICAgICAgICAgdmFyIGkgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgPCA1MCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoISF3aW5kb3cuZ191c2VyX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBJbml0UGFnZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgbG9hZFRyYW5zbGF0aW9ucygpXG4gICAgICAgIC50aGVuKGluaXQpO1xuXG4gICAgbGV0IG1haW5QYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhdl9fcGFnZScpO1xuICAgIHNldFRpbWVvdXQoKCkgPT4gbWFpblBhZ2UuY2xhc3NMaXN0LmFkZCgnb3ZlcmZsb3cnKSwgMTAwMCk7XG5cbiAgICAvLyBXZWJzb2NrZXRzXG4gICAgY29uc3Qgd3NVUkwgPSAnd3NzOi8vd3d3LmZhdmJldC51YS9zb2NrZXQnO1xuICAgIGNvbnN0IHNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3NVUkwpO1xuXG4gICAgY29uc3QgZXh0cmFjdEphY2twb3RBbW91bnRzID0gKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdENhdGVnb3JpZXMgPSB7IG1ham9yOiAwLCBtaW5vcjogMCwgbWluaTogMCwgbWVnYTogMCB9O1xuICAgICAgICBjb25zdCBqYWNrcG90cyA9IGRhdGEuZGF0YTtcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoZGVmYXVsdENhdGVnb3JpZXMpLnJlZHVjZSgoYW1vdW50cywgamFja3BvdFR5cGUpID0+IHtcbiAgICAgICAgICAgIGFtb3VudHNbamFja3BvdFR5cGVdID0gamFja3BvdHNbamFja3BvdFR5cGVdID8gamFja3BvdHNbamFja3BvdFR5cGVdLmFtb3VudCA6IDA7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50cztcbiAgICAgICAgfSwge30pO1xuICAgIH07XG5cbiAgICBjb25zdCB1cGRhdGVQcml6ZUVsZW1lbnRzID0gKGphY2twb3RBbW91bnRzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgW2NhdGVnb3J5LCBhbW91bnRdIG9mIE9iamVjdC5lbnRyaWVzKGphY2twb3RBbW91bnRzKSkge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC5wcml6ZS0ke2NhdGVnb3J5fWApO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gYCR7YW1vdW50LnRvRml4ZWQoMil94oK0YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmV2ZW50ID09PSAnamFja3BvdHNfdXBkYXRlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGphY2twb3RBbW91bnRzID0gZXh0cmFjdEphY2twb3RBbW91bnRzKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZVByaXplRWxlbWVudHMoamFja3BvdEFtb3VudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcGFyc2luZyBtZXNzYWdlOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBzb2NrZXQub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdXZWJTb2NrZXQgRXJyb3I6JywgZXJyb3IpO1xuICAgIH07XG5cbiAgICBjb25zdCBzZW5kUGluZyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBXZWJTb2NrZXQuT1BFTikge1xuICAgICAgICAgICAgc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBjbWQ6IFwicGluZ1wiLCBjaWQ6IFwicGluZ1wiIH0pKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQaW5nIG1lc3NhZ2Ugc2VudCcpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgY29ubmVjdGlvbiBlc3RhYmxpc2hlZCcpO1xuXG4gICAgICAgIGNvbnN0IGNpZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgIHNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGNtZDogXCJzdWJzY3JpYmVfamFja3BvdF91cGRhdGVzXCIsXG4gICAgICAgICAgICBjaWQ6IGNpZFxuICAgICAgICB9KSk7XG4gICAgICAgIHNldEludGVydmFsKHNlbmRQaW5nLCA1MDAwMCk7XG4gICAgfTtcblxuICAgIHNvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkJyk7XG4gICAgfTtcblxufSkoKTtcbiIsIihmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IDE7XG4gICAgbGV0IHN0YXJ0WCA9IDA7XG4gICAgbGV0IGlzRHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgIGNvbnN0IHNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcml6ZV9fc2xpZGVyJyk7XG4gICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJpemVfX2l0ZW0nKTtcbiAgICBjb25zdCB0b3RhbEl0ZW1zID0gaXRlbXMubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gdXBkYXRlU2xpZGVyKCkge1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBpbmRleCAtIGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgIGxldCBuZXdQb3NpdGlvbiA9IGRpc3RhbmNlICogMzMuMzM7XG5cbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA+IHRvdGFsSXRlbXMgLyAyKSB7XG4gICAgICAgICAgICAgICAgbmV3UG9zaXRpb24gLT0gdG90YWxJdGVtcyAqIDMzLjMzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZSA8IC10b3RhbEl0ZW1zIC8gMikge1xuICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uICs9IHRvdGFsSXRlbXMgKiAzMy4zMztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBpbmRleCA9PT0gY3VycmVudEluZGV4ID8gMSA6IDAuODtcblxuICAgICAgICAgICAgaXRlbS5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke25ld1Bvc2l0aW9ufSUpIHNjYWxlKCR7c2NhbGV9KWA7XG4gICAgICAgICAgICBpdGVtLnN0eWxlLnpJbmRleCA9IGluZGV4ID09PSBjdXJyZW50SW5kZXggPyAyIDogMTtcblxuICAgICAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gTWF0aC5hYnMoZGlzdGFuY2UpIDw9IDEgfHwgKGluZGV4ID09PSAwICYmIGN1cnJlbnRJbmRleCA9PT0gdG90YWxJdGVtcyAtIDEpIHx8IChpbmRleCA9PT0gdG90YWxJdGVtcyAtIDEgJiYgY3VycmVudEluZGV4ID09PSAwKTtcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJywgIWlzVmlzaWJsZSk7XG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC50b2dnbGUoJ2FjdGl2ZScsIGluZGV4ID09PSBjdXJyZW50SW5kZXgpO1xuXG4gICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2xlZnQtc2xpZGUnLCAncmlnaHQtc2xpZGUnKTtcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA9PT0gMSB8fCAoY3VycmVudEluZGV4ID09PSB0b3RhbEl0ZW1zIC0gMSAmJiBpbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ3JpZ2h0LXNsaWRlJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSAtMSB8fCAoY3VycmVudEluZGV4ID09PSAwICYmIGluZGV4ID09PSB0b3RhbEl0ZW1zIC0gMSkpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2xlZnQtc2xpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW92ZVNsaWRlcihvZmZzZXQpIHtcbiAgICAgICAgY3VycmVudEluZGV4ID0gKGN1cnJlbnRJbmRleCArIG9mZnNldCArIHRvdGFsSXRlbXMpICUgdG90YWxJdGVtcztcbiAgICAgICAgdXBkYXRlU2xpZGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlU3RhcnQoZXZlbnQpIHtcbiAgICAgICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHN0YXJ0WCA9IGV2ZW50LmNsaWVudFggfHwgZXZlbnQudG91Y2hlc1swXS5jbGllbnRYO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgY3VycmVudFggPSBldmVudC5jbGllbnRYIHx8IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgY29uc3QgZGlmZlggPSBjdXJyZW50WCAtIHN0YXJ0WDtcblxuICAgICAgICBpZiAoTWF0aC5hYnMoZGlmZlgpID4gNTApIHtcbiAgICAgICAgICAgIG1vdmVTbGlkZXIoZGlmZlggPiAwID8gLTEgOiAxKTtcbiAgICAgICAgICAgIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUVuZCgpIHtcbiAgICAgICAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGJ1dHRvbnNMZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1dHRvbi1zbGlkZXItbGVmdCcpXG4gICAgY29uc3QgYnV0dG9uc1JpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1dHRvbi1zbGlkZXItcmlnaHQnKVxuICAgIGJ1dHRvbnNMZWZ0LmZvckVhY2goYnRuICA9PiB7XG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIG1vdmVTbGlkZXIoLTEpO1xuICAgICAgICB9KVxuICAgIH0pXG4gICAgYnV0dG9uc1JpZ2h0LmZvckVhY2goYnRuICA9PiB7XG4gICAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIG1vdmVTbGlkZXIoMSk7XG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIHNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVTdGFydCk7XG4gICAgc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVTdGFydCk7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVNb3ZlKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBoYW5kbGVNb3ZlKTtcblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVFbmQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgaGFuZGxlRW5kKTtcblxuICAgIHVwZGF0ZVNsaWRlcigpO1xuXG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKkFOSU1BVElPTioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgYW5pbUl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLl9hbmltLWl0ZW1zJyk7XG5cbmlmKGFuaW1JdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcgLCBhbmltT25TY3JvbGwpXG5cbiAgICBmdW5jdGlvbiBhbmltT25TY3JvbGwocGFyYW1zKXtcbiAgICAgICAgZm9yKGxldCBpbmRleD0wOyBpbmRleDxhbmltSXRlbXMubGVuZ3RoOyBpbmRleCsrKXtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1JdGVtID0gYW5pbUl0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGFuaW1JdGVtSGlnaHQgPSBhbmltSXRlbS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBhbmltSXRlbU9mZlNldCA9IG9mZnNldChhbmltSXRlbSkudG9wO1xuICAgICAgICAgICAgY29uc3QgYW5pbVN0YXJ0ID0gNDtcblxuICAgICAgICAgICAgbGV0IGFuaW1JdGVtUG9pbnQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSBhbmltSXRlbUhpZ2h0IC8gYW5pbVN0YXJ0O1xuXG4gICAgICAgICAgICBpZihhbmltSXRlbUhpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0KXtcbiAgICAgICAgICAgICAgICBhbmltSXRlbVBvaW50ID0gd2luZG93LmlubmVySGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0IC8gYW5pbVN0YXJ0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZigocGFnZVlPZmZzZXQgPiBhbmltSXRlbU9mZlNldC1hbmltSXRlbVBvaW50KSAmJiBwYWdlWU9mZnNldCA8IChhbmltSXRlbU9mZlNldCArIGFuaW1JdGVtSGlnaHQpKXtcbiAgICAgICAgICAgICAgICBhbmltSXRlbS5jbGFzc0xpc3QuYWRkKCdfdmlldycpO1xuICAgICAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYoIWFuaW1JdGVtLmNsYXNzTGlzdC5jb250YWlucygnX2FuaW0tbm8taGlkZScpKXtcbiAgICAgICAgICAgICAgICAgICAgYW5pbUl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnX3ZpZXcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvZmZzZXQoZWwpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAgICAgICBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIHJldHVybiB7IHRvcDogcmVjdC50b3AgKyBzY3JvbGxUb3AsIGxlZnQ6IHJlY3QubGVmdCArIHNjcm9sbExlZnQgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgYW5pbU9uU2Nyb2xsKCk7XG4gICAgfSwgMzAwKTtcblxufVxuXG59KSgpO1xuIl19
